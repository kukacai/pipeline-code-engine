apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: deploy-to-code-engine
spec:
  params:
    - name: ibmcloud-api
      description: the ibmcloud api
      default: https://cloud.ibm.com
    - name: continuous-delivery-context-secret
      description: name of the configmap containing the continuous delivery pipeline context secrets
      default: secure-properties
    - name: ibmcloud-apikey-secret-key
      description: field in the secret that contains the api key used to login to ibmcloud
      default: apikey
    - name: app-name
      description: name of the Code Engine application
    - name: resource-group
      description: target resource group (name or id) for the ibmcloud login operation
    - name: region
      description: target region for the ibmcloud login operation (if none is found it will default to the toolchain region)
    - name: code-engine-project
      description: name of the Code Engine project for deploying application
    - name: service-bindings
      description: JSON object of a map of names to services instances to be bound to the application
      default: "{}"
    - name: cpu
      description: the amount of vCPU set for each instance of the application or job
      default: "0.25"
    - name: memory
      description: the amount of memory set for each instance of the application or job
      default: "0.5G"
    - name: ephemeral-storage
      description: the amount of ephemeral storage to set for each instance of the application or job
      default: "0.4G"
    - name: app-max-scale
      description: maximum scale of the Code Engine application
      default: "1"
    - name: app-min-scale
      description: minimum scale of the Code Engine application
      default: "0"
    - name: app-port
      description: port where the application is listening
      default: "8080"
    - name: app-visibility
      description: the visibility for the application. Valid values are 'public', 'private' and 'project'.
      default: "public"
    - name: app-concurrency
      description: the maximum number of requests that can be processed concurrently per instance. 
      default: "100"
    - name: image-repository
      description: the repository for the built image
    - name: image-tags
      description: the tags for the built image
    - name: shuttle-properties-file
      description: name of the properties file that contain properties to include in the environment
      default: "build.properties"
    - name: pipeline-debug
      description: Pipeline debug mode. Value can be 0 or 1. Default to 0
      default: "0"
    - name: task-image
      description: image used to execute this task
      default: "icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.11"
    - name: deployment-timeout
      description: maximum timeout for the application deployment.
      default: "300"
    - name: deployment-type
      description: Specifies the type of deployment. Valid values are 'application' and 'job'.
      default: "application"
    - name: job-instances
      description: Specifies the number of instances that are used for runs of the job. When you use this option, the system converts to array indices. For example, if you specify 'instances' of 5, the system converts to 'array-indices' of '0 - 4'
      default: "1"
    - name: job-maxexecutiontime
      description: The maximum execution time in seconds for runs of the job.
      default: "7200"
    - name: job-retrylimit
      description: The number of times to rerun an instance of the job before the job is marked as failed.
      default: "3"
  results:
    - name: app-url
      description: The running application's URL (obtained from APP_URL variable set by the executed script)
  workspaces:
    - name: artifacts
      description: A workspace
      mountPath: /artifacts
  steps:
    - name: execute
      image: $(params.task-image)
      workingDir: /artifacts
      env:
        - name: BUILD_NUMBER
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/build-number']
        - name: PIPELINE_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/pipeline-id']
        - name: PIPELINE_BLUEMIX_API_KEY
          valueFrom:
            secretKeyRef:
              name: $(params.continuous-delivery-context-secret)
              key: $(params.ibmcloud-apikey-secret-key)
        - name: SHUTTLE_PROPERTIES_FILE
          value: $(params.shuttle-properties-file)
      script: |
        #!/bin/bash
        set -e -o pipefail

        if [ $(params.pipeline-debug) == 1 ]; then
            env
            pwd
            ls -l
            echo "=== cat /artifacts/_toolchain.json ==="
            cat /artifacts/_toolchain.json
            echo ""
            echo "======================================"
            trap env EXIT
            set -x
        fi

        # SETUP BEGIN
        ibmcloud config --check-version false
        #
        # Targetting the region and resource group
        if [ "$(params.region)" ]; then
          # if cluster region is in the 'ibm:yp:<region>' just keep the region part
          IBM_CLOUD_REGION=$(echo "$(params.region)" | awk -F ':' '{print $NF;}')
        else
          IBM_CLOUD_REGION=$(jq -r '.region_id' /artifacts/_toolchain.json | awk -F: '{print $3}')
        fi
        ibmcloud login -a $(params.ibmcloud-api) -r $IBM_CLOUD_REGION --apikey $PIPELINE_BLUEMIX_API_KEY
        ibmcloud target -g "$(params.resource-group)"

        # View shuttle properties
        cat $(params.shuttle-properties-file)

        source $(params.shuttle-properties-file)
        export $(cut -d= -f1 $(params.shuttle-properties-file))

        #
        # Make sure that the latest version of Code Engine CLI is installed
        echo "Install the Code Engine plugin"      
        if ! ibmcloud plugin show code-engine >/dev/null 2>&1; then
            ibmcloud plugin install code-engine
        else
            ibmcloud plugin update code-engine --force
        fi

        #
        # Make sure the Code Engine project exists
        echo "Selecting Code Engine project '$(params.code-engine-project)' ..."
        if ibmcloud ce project select -n "$(params.code-engine-project)" > /dev/null 2>&1 ;
          then 
          echo "Selected the project."
        else 
          echo "IBM Code Engine project does not exists, Creating it..."
          ibmcloud ce project  create -n "$(params.code-engine-project)"
        fi

        echo "Loading Kube config..."
        ibmcloud ce proj select -n $(params.code-engine-project) -k

        if [[ $(params.service-bindings) != "" ]]; then
            RG_NAME=$(ibmcloud resource groups --output json | jq -r --arg RG "$(params.resource-group)" '.[] | select(.id==$RG) | .name')
            # check to see if "$(params.resource-group)" is a name or an ID
            if [[ "$RG_NAME" == "" ]]; then
              RG_NAME="$(params.resource-group)"
            fi
            # check to see if $RG_NAME is not the default resource group
            if [ $(ibmcloud resource groups --output json | jq -r --arg RG_NAME "$RG_NAME" '.[] | select(.name==$RG_NAME) | .default') == 'false' ]; then
              echo "Updating Code Engine project to bind to resource group $RG_NAME..."
              ibmcloud ce project update --binding-resource-group "$RG_NAME"
            fi
        fi

        #
        # Make sure the image is stored using the private ICR endpoint
        # The Code Engine build will make sure that a corresponding registry secret is being created
        IMAGE_URL="$(params.image-repository)"
        if [[ ! $IMAGE_URL == private.* ]]; then
            IMAGE_URL="private.$IMAGE_URL"
            echo -e "Pointing image reference to private ICR location: $IMAGE_URL"
        fi

        echo "deployment type: $(params.deployment-type)"
        if [[ $(params.deployment-type) == "application" ]]; then
            echo "Deploying your code as Code Engine application '$(params.app-name)'..."

            OPERATION="create"
            if ibmcloud ce app get -n $(params.app-name); then
                echo "Code Engine app with name $(params.app-name) found, updating it"
                OPERATION="update"
            else
                echo "Code Engine app with name $(params.app-name) not found, creating it"
            fi

            echo "   image: $IMAGE_URL:$(params.image-tags)"
            echo "   registry-secret: ce-auto-icr-private-$IBM_CLOUD_REGION"
            echo "   cpu: $(params.cpu)"
            echo "   memory: $(params.memory)"
            echo "   ephemeral-storage: $(params.ephemeral-storage)"
            echo "   min: $(params.app-min-scale)"
            echo "   max: $(params.app-max-scale)"
            echo "   concurrency: $(params.app-concurrency)"
            echo "   port: $(params.app-port)"
            echo "   visibility: $(params.app-visibility)"
            
            ibmcloud ce app $OPERATION -n $(params.app-name) \
                --image "$IMAGE_URL:$(params.image-tags)" \
                --registry-secret "ce-auto-icr-private-$IBM_CLOUD_REGION" \
                --cpu $(params.cpu) \
                --memory $(params.memory) \
                --ephemeral-storage $(params.ephemeral-storage) \
                --min $(params.app-min-scale) \
                --max $(params.app-max-scale) \
                --concurrency $(params.app-concurrency) \
                --visibility $(params.app-visibility) \
                --port $(params.app-port) \
                --wait=false

            # Bind services, if any
            while read; do
                NAME=$(echo "$REPLY" | jq -j '.key')
                PREFIX=$(echo "$REPLY" | jq -j '.value')

                if ! ibmcloud ce app get -n $(params.app-name) | grep "$NAME"; then
                    ibmcloud ce app bind -n $(params.app-name) --si "$NAME" -p "$PREFIX" -w=false
                fi
            done < <(jq -c 'to_entries | .[]' <<<$(echo $(params.service-bindings) | base64 -d))

            echo "Checking if application is ready..."
            KUBE_SERVICE_NAME=$(params.app-name)

            DEPLOYMENT_TIMEOUT=$(params.deployment-timeout)
            echo "Timeout for the application deployment is ${DEPLOYMENT_TIMEOUT}"
            ITERATION=0
            while [[ "${ITERATION}" -le "${DEPLOYMENT_TIMEOUT}" ]]; do
                sleep 1

                SVC_STATUS_READY=$(kubectl get ksvc/${KUBE_SERVICE_NAME} -o json | jq '.status?.conditions[]?.status?|select(. == "True")')

                SVC_STATUS_NOT_READY=$(kubectl get ksvc/${KUBE_SERVICE_NAME} -o json | jq '.status?.conditions[]?.status?|select(. == "False")')

                SVC_STATUS_UNKNOWN=$(kubectl get ksvc/${KUBE_SERVICE_NAME} -o json | jq '.status?.conditions[]?.status?|select(. == "Unknown")')

                if [ \( -n "$SVC_STATUS_NOT_READY" \) -o \( -n "$SVC_STATUS_UNKNOWN" \) ]; then
                    echo "Application not ready, retrying"
                elif [ -n "$SVC_STATUS_READY" ]; then
                    echo "Application is ready"
                    break
                else
                    echo "Application status unknown, retrying"
                fi
                ITERATION="${ITERATION}"+1
            done

            echo "Application service details:"
            kubectl describe ksvc/${KUBE_SERVICE_NAME}
            if [ \( -n "$SVC_STATUS_NOT_READY" \) -o \( -n "$SVC_STATUS_UNKNOWN" \) ]; then
                echo "Application is not ready after waiting maximum time"
                exit 1
            fi

            # Determine app url for polling from knative service
            TEMP_URL=$(kubectl get ksvc/${KUBE_SERVICE_NAME} -o json | jq '.status.url')
            echo "Application status URL: $TEMP_URL"
            TEMP_URL=${TEMP_URL%\"} # remove end quote
            TEMP_URL=${TEMP_URL#\"} # remove beginning quote
            APPLICATION_URL=$TEMP_URL
            if [ -z "$APPLICATION_URL" ]; then
                echo "Deploy failed, no URL found for application"
                exit 1
            fi
            echo "Application is available"
            echo "=========================================================="
            echo -e "View the application at: $APPLICATION_URL"

            # Record task results
            echo -n "$APPLICATION_URL" >$(results.app-url.path)

        else
            echo "Deploying your code as Code Engine job......"

            OPERATION="create"
            if ibmcloud ce job get --name $(params.app-name); then
                echo "Code Engine job with name $(params.app-name) found, updating it"
                OPERATION="update"
            else
                echo "Code Engine job with name $(params.app-name) not found, creating it"
            fi

            echo "   image: $IMAGE_URL:$(params.image-tags)"
            echo "   registry-secret: ce-auto-icr-private-$IBM_CLOUD_REGION"
            echo "   cpu: $(params.cpu)"
            echo "   memory: $(params.memory)"
            echo "   ephemeral-storage: $(params.ephemeral-storage)"
            echo "   instances: $(params.job-instances)"
            echo "   maxexecutiontime: $(params.job-maxexecutiontime)"
            echo "   retrylimit: $(params.job-retrylimit)"
            
            ibmcloud ce job $OPERATION -n $(params.app-name) \
                --image "$IMAGE_URL:$(params.image-tags)" \
                --registry-secret "ce-auto-icr-private-$IBM_CLOUD_REGION" \
                --cpu $(params.cpu) \
                --memory $(params.memory) \
                --ephemeral-storage $(params.ephemeral-storage) \
                --instances "$(params.job-instances)" \
                --maxexecutiontime "$(params.job-maxexecutiontime)" \
                --retrylimit "$(params.job-retrylimit)"

            # Bind services, if any
            while read; do
                NAME=$(echo "$REPLY" | jq -j '.key')
                PREFIX=$(echo "$REPLY" | jq -j '.value')

                if ! ibmcloud ce job get -n $(params.app-name) | grep "$NAME"; then
                    ibmcloud ce job bind -n $(params.app-name) --si "$NAME" -p "$PREFIX" -w=false
                fi
            done < <(jq -c 'to_entries | .[]' <<<$(echo $(params.service-bindings) | base64 -d))
            echo "Code Engine Job created/updated successfully."
            
            #
            # Record task results
            echo -n "Code Engine Job created/updated" >$(results.app-url.path)
        fi

      volumeMounts:
        - mountPath: /cd-config
          name: cd-config-volume
        - mountPath: /steps
          name: steps-volume
        - mountPath: /artifacts/_toolchain.json
          subPath: toolchain.json
          name: cd-config-volume
  volumes:
    - name: steps-volume
      emptyDir: {}
    - name: cd-config-volume
      configMap:
        name: toolchain
        items:
          - key: toolchain.json
            path: toolchain.json
